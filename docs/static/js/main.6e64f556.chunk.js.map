{"version":3,"sources":["features/asyncSlice.util.ts","routes/common/Header.tsx","routes/common/Table.tsx","apis/team-view.api.ts","features/teams/teams.slice.ts","routes/common/Loading.tsx","routes/teams/TeamsList.tsx","features/approvalSchemes/approvalSchemeDraft.model.ts","features/users/users.slice.ts","features/approvalSchemes/approvalScheme.slice.ts","routes/approvalScheme/ApprovalScheme.tsx","App.tsx","serviceWorker.ts","store.ts","index.tsx"],"names":["LoadingState","AppBar","position","Toolbar","Typography","variant","useStyles","makeStyles","root","width","container","maxHeight","columns","rows","classes","React","useState","page","setPage","rowsPerPage","setRowsPerPage","Paper","className","TableContainer","Table","stickyHeader","aria-label","TableHead","TableRow","map","column","TableCell","key","id","align","style","minWidth","label","TableBody","slice","row","hover","role","tabIndex","value","format","TablePagination","rowsPerPageOptions","component","count","length","onChangePage","event","newPage","onChangeRowsPerPage","target","fetchRessource","ressourceEndPoint","a","fetch","response","ok","Error","status","json","responseData","camelcaseKeys","adapterInitialState","Idle","error","buildAsyncReducer","asyncThunk","adapter","builder","addCase","fulfilled","state","payload","Succeeded","setAll","pending","Loading","rejected","Failed","teamsAdapter","createEntityAdapter","fetchTeamsThunk","createAsyncThunk","teamsSliceInitialState","getInitialState","teamsSlice","createSlice","name","initialState","reducers","extraReducers","selectTeamsSlice","teams","selectTeamsLoadingStatus","createSelector","getSelectors","selectAllTeams","selectAll","selectTeamById","selectById","loadingStates","children","hasFailure","some","isLoading","ApprovalSchemeDraftValidationErrors","prepareData","team","teamName","to","teamMembersCount","users","dispatch","useDispatch","useSelector","teamsLoadingStatus","useEffect","usersAdapter","fetchUsersThunk","usersSliceInitialState","usersSlice","selectUsersSlice","selectUsersLoadingStatus","selectAllUsers","selectUserEntities","selectEntities","approvalSchemeAdapter","selectId","approvalScheme","teamId","approvalSchemeSliceInitialState","approvalSchemeSlice","setApprovalScheme","removeOne","addOne","actions","selectApprovalSchemeByTeamId","validationToErrorMap","ApproverNotUnique","approvalSteps","approvalStepsWithUniqueApprovers","uniqBy","approvalStep","approverUserId","ApproverUndefined","ThresholdNotPositiveNumber","threshold","ThresholdOverlapping","lastIndex","i","currentThreshold","previousThreshold","checkThresholdsValues","useEditApprovalScheme","draft","setDraft","draftErrors","setDraftErrors","draftActions","addStepToDraft","numberOfSteps","lastStepIndex","newApprovalStepsDraft","take","addApprovalStepToDraft","modifyThreshold","stepIndex","modifyStepThreshold","modifyApprover","approverId","modifyStepApprover","validateDraft","errors","Object","entries","reduce","acc","validationErrorKey","validateFunction","push","getApprovalDraftValidateErrors","getUserSelect","usersList","onChange","nanoid","FormControl","InputLabel","Select","labelId","user","MenuItem","firstName","lastName","ApprovalStepEditView","useParams","usersEntities","usersLoadingStatus","maybeApprovalScheme","getEmptyDraft","usersEntity","approvalStepsViewData","index","approver","undefined","approverName","approvalStepViewData","approveFrom","approveTo","toString","TextField","type","Button","color","onClick","App","Header","exact","path","TeamsList","Boolean","window","location","hostname","match","rootReducer","combineReducers","usersReducer","teamsReducer","approvalSchemeReducer","configureStore","reducer","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.6e64f556.chunk.js","sourcesContent":["import { ActionReducerMapBuilder, AsyncThunk, EntityAdapter, EntityState } from '@reduxjs/toolkit'\n\nexport enum LoadingState {\n    Idle,\n    Loading,\n    Succeeded,\n    Failed,\n}\n\nexport interface AsyncInitialState extends EntityState<unknown> {\n    status: LoadingState,\n    error: null | string,\n}\n\nexport const adapterInitialState = {\n    status: LoadingState.Idle,\n    error: null,\n}\n\nexport const buildAsyncReducer = \n(asyncThunk: AsyncThunk<any, void, {}>) =>\n(adapter: EntityAdapter<any>) => \n(builder: ActionReducerMapBuilder<AsyncInitialState>) => \n{\n    builder.addCase(asyncThunk.fulfilled, (state, {payload}) => {\n        state.status = LoadingState.Succeeded;\n        state.error = null;\n        adapter.setAll(state, payload);\n    });\n\n    builder.addCase(asyncThunk.pending, (state, {payload}) => {\n        state.status = LoadingState.Loading;\n    });\n\n    builder.addCase(asyncThunk.rejected, (state, {payload}) => {\n        state.status = LoadingState.Failed;\n        state.error = payload as string;\n    });\n}","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nconst appTitle = \"Spendesk Team view\"\n\nexport default () => (\n    <header>\n        <AppBar position=\"static\">\n            <Toolbar>\n                <Typography variant=\"h6\">\n                    {appTitle}\n                </Typography>\n            </Toolbar>\n        </AppBar>\n    </header>\n);","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\n\nconst useStyles = makeStyles({\n    root: {\n        width: '100%',\n    },\n    container: {\n        maxHeight: 440,\n    },\n});\n\nexport interface Column {\n    id: string;\n    label: string;\n    minWidth?: number;\n    align?: 'right';\n    format?: (value: number) => string;\n}\n\nexport interface Row {\n    id: string,\n    [key: string]: string | number | React.Component\n}\n\ninterface TableProps {\n    columns: Column[],\n    rows: any[]\n}\n\nexport default ({columns, rows}: TableProps) => {\n    const classes = useStyles();\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\n\n    const handleChangePage = (event: unknown, newPage: number) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setRowsPerPage(+event.target.value);\n        setPage(0);\n    };\n\n    return (\n        <Paper className={classes.root}>\n            <TableContainer className={classes.container}>\n                <Table stickyHeader aria-label=\"sticky table\">\n                    <TableHead>\n                        <TableRow>\n                            {columns.map((column) => (\n                                <TableCell\n                                    key={column.id}\n                                    align={column.align}\n                                    style={{ minWidth: column.minWidth }}\n                                >\n                                    {column.label}\n                                </TableCell>\n                            ))}\n                        </TableRow>\n                </TableHead>\n                <TableBody>\n                    {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\n                    return (\n                        <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.id}>\n                        {columns.map((column) => {\n                            const value = row[column.id];\n                            return (\n                            <TableCell key={column.id} align={column.align}>\n                                {column.format && typeof value === 'number' ? column.format(value) : value}\n                            </TableCell>\n                            );\n                        })}\n                        </TableRow>\n                    );\n                    })}\n                </TableBody>\n            </Table>\n            </TableContainer>\n            <TablePagination\n                rowsPerPageOptions={[5, 10]}\n                component=\"div\"\n                count={rows.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onChangePage={handleChangePage}\n                onChangeRowsPerPage={handleChangeRowsPerPage}\n            />\n        </Paper>\n    );\n}\n","import camelcaseKeys from 'camelcase-keys';\nimport { User } from 'features/users/user.model';\nimport { Team } from 'features/teams/team.model';\n\nconst teamsEndPoint = 'https://s3-eu-west-1.amazonaws.com/spx-development/contents/teams';\nconst usersEndPoint = 'https://s3-eu-west-1.amazonaws.com/spx-development/contents/users';\n\nconst fetchRessource = async (ressourceEndPoint: string) => {\n    const response = await fetch(ressourceEndPoint);\n    if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const responseData = await response.json();\n    return camelcaseKeys(responseData);\n}\n\nexport const fetchTeams: () => Promise<[Team]> = () => fetchRessource(teamsEndPoint);\nexport const fetchUsers: () => Promise<[User]> = () => fetchRessource(usersEndPoint);\n","import { Team } from './team.model';\nimport { createAsyncThunk, createEntityAdapter, createSelector, createSlice } from '@reduxjs/toolkit'\nimport { fetchTeams } from 'apis/team-view.api'\nimport { RootState } from 'store';\nimport { adapterInitialState, buildAsyncReducer } from '../asyncSlice.util';\n\nconst teamsAdapter = createEntityAdapter<Team>();\n\nexport const fetchTeamsThunk = createAsyncThunk(\n    'teams',\n    fetchTeams\n);\n\nexport const teamsSliceInitialState = teamsAdapter.getInitialState(adapterInitialState);\n\nexport const teamsSlice = createSlice({\n    name: 'teams',\n    initialState: teamsSliceInitialState,\n    reducers: {\n    },\n    extraReducers: buildAsyncReducer(fetchTeamsThunk)(teamsAdapter)\n});\n\nexport const selectTeamsSlice = (state: RootState) => state.teams;\n\nexport const selectTeamsLoadingStatus = createSelector(\n    selectTeamsSlice,\n    teamsSlice => teamsSlice.status\n);\n\nexport const selectTeamsLoadingError = createSelector(\n    selectTeamsSlice,\n    teamsSlice => teamsSlice.error\n);\n\nexport const {\n    selectAll: selectAllTeams,\n    selectById: selectTeamById,\n} = teamsAdapter.getSelectors(selectTeamsSlice);\n\nexport default teamsSlice.reducer;","import React from 'react';\nimport { LoadingState } from 'features/asyncSlice.util'\n\ninterface LoadingProps {\n    loadingStates: LoadingState[],\n    children: React.ReactElement | React.ReactElement[],\n}\n\nexport default function Loading ({loadingStates, children}: LoadingProps) {\n\n    const hasFailure = loadingStates.some(state => state === LoadingState.Failed);\n    const isLoading = loadingStates.some(state => state === LoadingState.Loading);\n\n    return (\n    <section>\n        {\n            hasFailure && <h3>An error occured loading some ressources</h3>\n        }\n        {\n            isLoading && <h3>Currently loading...</h3>\n        }\n        {\n            !isLoading && !hasFailure && <>{children}</>\n        }\n    </section>\n    );\n};","import React, { useEffect } from 'react';\nimport Table, { Column } from 'routes/common/Table'\nimport { Link } from \"react-router-dom\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchTeamsThunk, selectAllTeams, selectTeamsLoadingStatus } from 'features/teams/teams.slice'\nimport { Team } from 'features/teams/team.model'\nimport { LoadingState } from 'features/asyncSlice.util'\nimport Loading from '../common/Loading'\n\nconst columns: Column[] = [\n    { id: 'teamName', label: 'Team name', minWidth: 170 },\n    { id: 'teamMembersCount', label: 'Number of people', minWidth: 100 },\n];\n\ninterface RowData {\n    id: string,\n    teamName: React.ReactElement,\n    teamMembersCount: number,\n}\n\nconst prepareData = (team: Team): RowData => (\n    {\n        id: team.id,\n        teamName: <Link to={`/team/${team.id}`}>{team.name}</Link>,\n        teamMembersCount: team.users.length,\n    }\n);\n\nexport default () => {\n    const dispatch = useDispatch()\n    const teams = useSelector(selectAllTeams);\n    const teamsLoadingStatus = useSelector(selectTeamsLoadingStatus);\n    \n    useEffect(() => {\n        if(teamsLoadingStatus === LoadingState.Idle){\n            dispatch(fetchTeamsThunk());\n        }\n    }, [teamsLoadingStatus, dispatch])\n\n    const rows = teams.map(prepareData);\n\n    return (\n        <Loading\n            loadingStates = {[teamsLoadingStatus]}\n        >\n            <Table\n                columns = {columns}\n                rows = {rows}\n            />\n        </Loading>\n    )\n}\n","import { UserId } from '../users/user.model'\nimport { TeamId } from '../teams/team.model'\nimport { take, uniqBy } from 'ramda'\n\nexport interface ApprovalStepDraft {\n    approverUserId: UserId | null,\n    threshold: number | null,\n}\n\nexport interface ApprovalSchemeDraft {\n    teamId: TeamId,\n    approvalSteps: ApprovalStepDraft[],\n}\n\nexport enum ApprovalSchemeDraftValidationErrors {\n    ApproverNotUnique = \"ApproverNotUnique\",\n    ApproverUndefined = \"ApproverUndefined\",\n    ThresholdNotPositiveNumber = \"ThresholdNotPositiveNumber\",\n    ThresholdOverlapping = \"ThresholdOverlapping\",\n}\nexport const getEmptyDraft = (teamId: TeamId): ApprovalSchemeDraft => (\n    {\n        teamId,\n        approvalSteps: [],\n    }\n);\n\nexport const isApproverUniqueInApprovalSteps = ({ approvalSteps }: ApprovalSchemeDraft): boolean => {\n    const approvalStepsWithUniqueApprovers = uniqBy(\n        (approvalStep: ApprovalStepDraft) => approvalStep.approverUserId, \n        approvalSteps\n    );\n\n    return approvalSteps.length === approvalStepsWithUniqueApprovers.length;\n}\n\nexport const areApproversDefined = ({ approvalSteps }: ApprovalSchemeDraft): boolean => (\n    !approvalSteps.some(approvalStep => approvalStep.approverUserId === null)\n)\n\nexport const areThresholdsPositive = ({ approvalSteps }: ApprovalSchemeDraft): boolean => (\n    !approvalSteps.some(approvalStep => \n        approvalStep.threshold !== null && \n        (typeof approvalStep.threshold !== 'number' || approvalStep.threshold <= 0)\n    )\n)\n\nexport const areThresholdsNotOverlapping = ({ approvalSteps }: ApprovalSchemeDraft): boolean => {\n    const lastIndex = approvalSteps.length - 1;\n\n    const checkLastThresholdIsNull = () => approvalSteps[lastIndex].threshold === null;\n\n    const checkThresholdsValues = () => {\n        if(approvalSteps.length < 3) {\n            return true;\n        }\n\n        for(let i = lastIndex - 1; i > 0; i--) {\n            const currentThreshold = approvalSteps[i].threshold;\n            const previousThreshold = approvalSteps[i - 1].threshold;\n            return (\n                currentThreshold === null || previousThreshold === null ? false :\n                currentThreshold < previousThreshold ? false : \n                true\n            );\n        }\n\n        return true;\n    } \n\n    return checkLastThresholdIsNull() && checkThresholdsValues();\n}\n\nconst validationToErrorMap = {\n    [ApprovalSchemeDraftValidationErrors.ApproverNotUnique]: isApproverUniqueInApprovalSteps,\n    [ApprovalSchemeDraftValidationErrors.ApproverUndefined]: areApproversDefined,\n    [ApprovalSchemeDraftValidationErrors.ThresholdNotPositiveNumber]: areThresholdsPositive,\n    [ApprovalSchemeDraftValidationErrors.ThresholdOverlapping]: areThresholdsNotOverlapping,\n}\n\nexport const getApprovalDraftValidateErrors = (approvalScheme: ApprovalSchemeDraft): ApprovalSchemeDraftValidationErrors[] => (\n    Object.entries(validationToErrorMap).reduce(\n        (acc, [validationErrorKey, validateFunction]): ApprovalSchemeDraftValidationErrors[] => {\n            if (!validateFunction(approvalScheme)) {\n                acc.push(validationErrorKey as ApprovalSchemeDraftValidationErrors)  \n            }\n            return acc;\n        }\n    , [] as ApprovalSchemeDraftValidationErrors[])\n)\n\nexport const addApprovalStepToDraft = (approvalScheme: ApprovalSchemeDraft): ApprovalSchemeDraft => {\n    const { approvalSteps } = approvalScheme;\n    const numberOfSteps = approvalSteps.length;\n    const lastStepIndex = approvalSteps.length - 1;\n    const approverUserId = null;\n\n    const addApprovalStepToEmptySteps = () => (\n        [{\n            approverUserId,\n            threshold: null,\n        }]\n    );\n\n    const addApprovalStepToSingleStep = () => (\n        [\n            {\n                approverUserId,\n                threshold: 0,\n            },\n            ...approvalSteps\n        ]\n    );\n\n    const addApprovalStepMultipleSteps = () => (\n        [\n            ...take(numberOfSteps - 1, approvalSteps),\n            {\n                approverUserId,\n                threshold: approvalSteps[lastStepIndex - 1].threshold,\n            },\n            approvalSteps[lastStepIndex],\n        ]\n    );\n\n    const newApprovalStepsDraft = (\n            numberOfSteps === 0 ? addApprovalStepToEmptySteps() :\n            numberOfSteps === 1 ? addApprovalStepToSingleStep() :\n            addApprovalStepMultipleSteps()\n    );\n\n    return {\n        ...approvalScheme,\n        approvalSteps: newApprovalStepsDraft,\n    }\n}\n\nexport const modifyStepThreshold = \n(threshold: number) => \n(stepIndex: number) =>\n(approvalScheme: ApprovalSchemeDraft): ApprovalSchemeDraft => {\n    const { approvalSteps } = approvalScheme;\n    const lastStepIndex = approvalSteps.length - 1;\n\n    if(stepIndex >= lastStepIndex) {\n        return approvalScheme;\n    }\n\n    approvalSteps[stepIndex].threshold = threshold;\n    return {\n        ...approvalScheme,\n        approvalSteps,\n    }\n}\n\nexport const modifyStepApprover = \n(approverId: UserId) => \n(stepIndex: number) =>\n(approvalScheme: ApprovalSchemeDraft): ApprovalSchemeDraft => {\n    const { approvalSteps } = approvalScheme;\n    const lastStepIndex = approvalSteps.length - 1;\n\n    if(stepIndex > lastStepIndex) {\n        return approvalScheme;\n    }\n\n    approvalSteps[stepIndex].approverUserId = approverId;\n    return {\n        ...approvalScheme,\n        approvalSteps,\n    }\n}\n","import { User } from './user.model';\nimport { createAsyncThunk, createEntityAdapter, createSelector, createSlice } from '@reduxjs/toolkit'\nimport { fetchUsers } from 'apis/team-view.api'\nimport { RootState } from 'store';\nimport { adapterInitialState, buildAsyncReducer } from '../asyncSlice.util';\n\nconst usersAdapter = createEntityAdapter<User>();\n\nexport const fetchUsersThunk = createAsyncThunk(\n    'users',\n    fetchUsers\n);\n\nexport const usersSliceInitialState = usersAdapter.getInitialState(adapterInitialState);\n\nexport const usersSlice = createSlice({\n    name: 'users',\n    initialState: usersSliceInitialState,\n    reducers: {\n    },\n    extraReducers: buildAsyncReducer(fetchUsersThunk)(usersAdapter)\n});\n\nexport const selectUsersSlice = (state: RootState) => state.users;\n\nexport const selectUsersLoadingStatus = createSelector(\n    selectUsersSlice,\n    usersSlice => usersSlice.status\n);\n\nexport const selectUsersLoadingError = createSelector(\n    selectUsersSlice,\n    usersSlice => usersSlice.error\n);\n\nexport const {\n    selectAll: selectAllUsers,\n    selectById: selectUserById,\n    selectEntities: selectUserEntities,\n} = usersAdapter.getSelectors(selectUsersSlice);\n\nexport default usersSlice.reducer;","import { ApprovalScheme } from './approvalScheme.model';\nimport { createEntityAdapter, createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { RootState } from 'store';\n\nconst approvalSchemeAdapter = createEntityAdapter<ApprovalScheme>({\n    selectId: approvalScheme => approvalScheme.teamId,\n});\n\nexport const approvalSchemeSliceInitialState = approvalSchemeAdapter.getInitialState();\n\nexport const approvalSchemeSlice = createSlice({\n    name: 'approvalScheme',\n    initialState: approvalSchemeSliceInitialState,\n    reducers: {\n        setApprovalScheme(state, {payload}: PayloadAction<ApprovalScheme>) {\n            approvalSchemeAdapter.removeOne(state, payload.teamId);\n            approvalSchemeAdapter.addOne(state, payload)\n        }\n    },\n});\n\nexport const { setApprovalScheme } = approvalSchemeSlice.actions;\n\nexport const selectApprovalSchemeSlice = (state: RootState) => state.approvalScheme;\n\nexport const {\n    selectAll: selectAllApprovalSchemes,\n    selectById: selectApprovalSchemeByTeamId,\n} = approvalSchemeAdapter.getSelectors(selectApprovalSchemeSlice);\n\nexport default approvalSchemeSlice.reducer;","import React, { useEffect, useState } from 'react';\nimport { nanoid } from '@reduxjs/toolkit'\nimport Table, { Column } from 'routes/common/Table'\nimport { useSelector, useDispatch } from 'react-redux';\nimport { UserId } from 'features/users/user.model'\nimport { fetchTeamsThunk, selectTeamById, selectTeamsLoadingStatus } from 'features/teams/teams.slice'\nimport { fetchUsersThunk, selectAllUsers, selectUsersLoadingStatus, selectUserEntities } from 'features/users/users.slice'\nimport { selectApprovalSchemeByTeamId, setApprovalScheme } from 'features/approvalSchemes/approvalScheme.slice'\nimport { ApprovalScheme } from 'features/approvalSchemes/approvalScheme.model'\nimport { \n    ApprovalSchemeDraft, \n    ApprovalStepDraft, \n    addApprovalStepToDraft, \n    getEmptyDraft, \n    modifyStepThreshold,\n    modifyStepApprover,\n    getApprovalDraftValidateErrors,\n    ApprovalSchemeDraftValidationErrors,\n} from 'features/approvalSchemes/approvalSchemeDraft.model'\nimport { User } from 'features/users/user.model'\nimport { useParams } from \"react-router-dom\";\nimport { Dictionary } from '@reduxjs/toolkit'\nimport { RootState } from 'store';\nimport { LoadingState } from 'features/asyncSlice.util'\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { Link } from \"react-router-dom\";\nimport Loading from '../common/Loading'\n\ninterface ApprovalStepViewData {\n    id: number,\n    approverId: UserId | null,\n    approverName: string,\n    approveFrom: number,\n    approveTo: number | null\n}\n\nconst columns: Column[] = [\n    { id: 'approverName', label: 'Approver name', minWidth: 170 },\n    { id: 'approveFrom', label: 'Approve From', minWidth: 200 },\n    { id: 'approveTo', label: 'Approve To', minWidth: 200 },\n];\n\ninterface RowData {\n    id: string,\n    approverName: string | React.ReactElement,\n    approveFrom: string | React.ReactElement,\n    approveTo: string | React.ReactElement,\n}\n\ninterface DraftActions {\n    addStepToDraft: () => void,\n    modifyThreshold: (threshold: number, stepIndex: number) => void,\n    modifyApprover: (approverId: UserId, stepIndex: number) => void,\n}\n\nconst approvalStepsToApprovalStepViewData = \n(usersEntity: Dictionary<User>) =>\n(approvalSteps: ApprovalStepDraft[]): ApprovalStepViewData[] => {\n\n    const reducer = (\n        approvalStepsViewData: ApprovalStepViewData[], \n        approvalStep: ApprovalStepDraft, \n        index: number, \n        approvalSteps: ApprovalStepDraft[]\n    ): ApprovalStepViewData[]  => {\n        \n        const approver = approvalStep.approverUserId ? usersEntity[approvalStep.approverUserId] : undefined;\n        const approverName = approver === undefined ? '' : `${approver.firstName} ${approver.lastName}`;\n\n        const approvalStepViewDataForFirstElement = () => (\n            {\n                id: index,\n                approverId: approvalStep.approverUserId,\n                approverName,\n                approveFrom: 0,\n                approveTo: approvalStep.threshold\n            }\n        );\n\n        const approvalStepViewDataForOtherElements = () => (\n            {\n                id: index,\n                approverId: approvalStep.approverUserId,\n                approverName,\n                approveFrom: approvalSteps[index - 1].threshold as number,\n                approveTo: approvalStep.threshold\n            }\n        );\n\n        const approvalStepViewData = index === 0 ? approvalStepViewDataForFirstElement() : approvalStepViewDataForOtherElements();\n        approvalStepsViewData.push(approvalStepViewData);\n\n        return approvalStepsViewData;\n    }\n\n    return approvalSteps.reduce(reducer, [])\n};\n\nconst prepareData = \n(usersList: User[]) =>\n(draftActions: DraftActions) => \n(approvalStepViewData: ApprovalStepViewData): RowData => (\n    {\n        id: approvalStepViewData.id.toString(),\n        approverName: getUserSelect\n                        (usersList)\n                        ((event: any) => draftActions.modifyApprover(event.target.value, approvalStepViewData.id))\n                        (approvalStepViewData.approverId),\n        approveFrom: 'From: ' + approvalStepViewData.approveFrom,\n        approveTo:  approvalStepViewData.approveTo === null ? ' - ' \n                    :   <> \n                            <TextField\n                                id=\"standard-number\"\n                                label=\"Up to\"\n                                type=\"number\"\n                                value={approvalStepViewData.approveTo}\n                                onChange={event => draftActions.modifyThreshold(+event.target.value, approvalStepViewData.id)}\n                            />\n                        </>\n                    \n    }\n);\n\nfunction useEditApprovalScheme(approvalScheme: ApprovalSchemeDraft) {\n    const dispatch = useDispatch()\n    const [draft, setDraft] = useState(approvalScheme);\n    const [draftErrors, setDraftErrors] = useState([] as ApprovalSchemeDraftValidationErrors[]);\n\n    const addStepToDraft = () => setDraft(addApprovalStepToDraft(draft));\n    const modifyThreshold = (threshold: number, stepIndex: number) => setDraft(modifyStepThreshold(threshold)(stepIndex)(draft));\n    const modifyApprover = (approverId: string, stepIndex: number) => setDraft(modifyStepApprover(approverId)(stepIndex)(draft));\n    const validateDraft = () => {\n        const errors = getApprovalDraftValidateErrors(draft);\n        if(errors.length === 0){\n            dispatch(setApprovalScheme(draft as ApprovalScheme))\n        }\n        setDraftErrors(errors)\n    }\n\n    return {\n        draft,\n        draftErrors,\n        draftActions: {\n            addStepToDraft,\n            modifyThreshold,\n            modifyApprover,\n            validateDraft,\n        }\n    };\n}\n\nconst getUserSelect = \n(usersList: User[]) => \n(onChange: any) => \n(value: string | null) => {\n    const selectId = nanoid();\n    return (\n        <FormControl>\n            <InputLabel id = {selectId}>Users</InputLabel>\n            <Select\n                value = {value ?? ''}\n                labelId = {selectId}\n                id = {selectId}\n                onChange = {onChange}\n            >\n                {usersList.map(\n                    (user) => (\n                        <MenuItem \n                            value = {user.id}\n                            key = {user.id}\n                        >\n                            {`${user.firstName} ${user.lastName}`}\n                        </MenuItem>\n                    ) \n                )}\n            </Select>\n        </FormControl>\n    );\n}\n\nexport default function ApprovalStepEditView() {\n    const dispatch = useDispatch()\n\n    const { teamId } = useParams();\n    const team = useSelector((state: RootState) => selectTeamById(state, teamId));\n    const teamsLoadingStatus = useSelector(selectTeamsLoadingStatus);\n\n    const usersEntities = useSelector(selectUserEntities);\n    const usersList = useSelector(selectAllUsers);\n    const usersLoadingStatus = useSelector(selectUsersLoadingStatus);\n\n    const maybeApprovalScheme = useSelector((state: RootState) => selectApprovalSchemeByTeamId(state, teamId));\n    const approvalScheme = maybeApprovalScheme ?? getEmptyDraft(teamId);\n    \n    useEffect(() => {\n        if(teamsLoadingStatus === LoadingState.Idle){\n            dispatch(fetchTeamsThunk());\n        }\n    }, [teamsLoadingStatus, dispatch])\n\n    useEffect(() => {\n        if(usersLoadingStatus === LoadingState.Idle){\n            dispatch(fetchUsersThunk());\n        }\n    }, [usersLoadingStatus, dispatch])\n\n    const {draft, draftErrors, draftActions} = useEditApprovalScheme(approvalScheme);\n    \n    const approvalStepsViewData = approvalStepsToApprovalStepViewData(usersEntities)(draft.approvalSteps);\n    const rows = approvalStepsViewData.map(prepareData(usersList)(draftActions));\n\n    if(team === undefined && teamsLoadingStatus === LoadingState.Succeeded) {\n        return (\n            <section>\n                <section>\n                    <Link to={`/`}>Back to teams list</Link>\n                </section>\n                <h5>No team with this Id exist</h5>\n            </section>\n        );\n    }\n    return (\n        <Loading\n            loadingStates = {[teamsLoadingStatus, usersLoadingStatus]}\n        >\n            <section>\n                <section>\n                    <Link to={`/`}>Back to teams list</Link>\n                </section>\n                <section>\n                    <h5>\n                        {\n                            approvalScheme === undefined ? 'No approval scheme created yet' : 'Below the approval scheme defined'\n                        }\n                        for {team?.name}\n                    </h5>\n                    <Button \n                        variant=\"contained\" \n                        color=\"primary\"\n                        onClick={draftActions.addStepToDraft}\n                    >\n                        Add approval step\n                    </Button>\n                    <Table\n                        rows = {rows}\n                        columns = {columns}\n                    />\n                    <Button \n                        variant=\"contained\" \n                        color=\"primary\"\n                        onClick={draftActions.validateDraft}\n                    >\n                        Validate the approval scheme\n                    </Button>\n\n                    {\n                        draftErrors.length > 0 &&\n                        <div>\n                            <h5>Approval Scheme invalid: </h5>\n                            { draftErrors.map(error => <p>{error}</p>) }\n                        </div>\n                    }\n                </section>\n            </section>\n        </Loading>\n    )\n}\n","import React from 'react';\nimport Header from 'routes/common/Header';\nimport TeamsList from 'routes/teams/TeamsList';\nimport ApprovalScheme from 'routes/approvalScheme/ApprovalScheme';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Router>\n                <Header />\n                <Switch>\n                    <Route exact path=\"/\">\n                        <TeamsList />\n                    </Route>\n                    <Route path=\"/team/:teamId\">\n                        <ApprovalScheme />\n                    </Route>\n                    <Route path=\"*\">\n                        <Redirect to=\"/\" />\n                    </Route>\n                </Switch>\n            </Router>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers, configureStore } from '@reduxjs/toolkit';\nimport usersReducer from 'features/users/users.slice'\nimport teamsReducer from 'features/teams/teams.slice'\nimport approvalSchemeReducer from 'features/approvalSchemes/approvalScheme.slice'\n\nexport const rootReducer = combineReducers({\n    users: usersReducer,\n    teams: teamsReducer,\n    approvalScheme: approvalSchemeReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default configureStore({\n    reducer: rootReducer,\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}